# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from proxy import UDP_Proxy

class Ui_MainWindow(object):

    proxy = None

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(355, 195)
        MainWindow.setFixedSize(355, 195)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_stats)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_start_stop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_start_stop.setGeometry(QtCore.QRect(20, 140, 311, 28))
        self.pushButton_start_stop.setObjectName("pushButton_start_stop")
        self.spinBox_remote_port = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox_remote_port.setGeometry(QtCore.QRect(270, 40, 65, 22))
        self.spinBox_remote_port.setAccelerated(False)
        self.spinBox_remote_port.setMinimum(1)
        self.spinBox_remote_port.setMaximum(65535)
        self.spinBox_remote_port.setProperty("value", 2456)
        self.spinBox_remote_port.setObjectName("spinBox_remote_port")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 20, 75, 16))
        self.label.setObjectName("label")
        self.lineEdit_remote_ipv6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_remote_ipv6.setGeometry(QtCore.QRect(20, 40, 241, 22))
        self.lineEdit_remote_ipv6.setObjectName("lineEdit_remote_ipv6")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 120, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 70, 250, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit_listening = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_listening.setGeometry(QtCore.QRect(20, 90, 201, 22))
        self.lineEdit_listening.setReadOnly(True)
        self.lineEdit_listening.setObjectName("lineEdit_listening")
        self.lineEdit_listening.setText("Stopped")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(245, 80, 31, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(245, 100, 31, 16))
        self.label_5.setObjectName("label_5")
        self.label_sent = QtWidgets.QLabel(self.centralwidget)
        self.label_sent.setGeometry(QtCore.QRect(278, 80, 71, 16))
        self.label_sent.setObjectName("label_sent")
        self.label_recv = QtWidgets.QLabel(self.centralwidget)
        self.label_recv.setGeometry(QtCore.QRect(278, 100, 71, 16))
        self.label_recv.setObjectName("label_recv")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "UDP Proxy Beta 1"))
        self.pushButton_start_stop.setText(_translate("MainWindow", "Start"))
        self.label.setText(_translate("MainWindow", "Remote port"))
        self.label_2.setText(_translate("MainWindow", "Remote server (IPv6)"))
        self.label_3.setText(_translate("MainWindow", "Listening on: (Connect to this address)"))
        self.label_4.setText(_translate("MainWindow", "Sent: "))
        self.label_5.setText(_translate("MainWindow", "Recv:"))
        self.label_sent.setText(_translate("MainWindow", "--"))
        self.label_recv.setText(_translate("MainWindow", "--"))

    def bind_actions(self):
        self.pushButton_start_stop.clicked.connect(self.pb_clicked)

    def pb_clicked(self):
        
        if self.proxy is None:
            
            try:
                self.proxy = UDP_Proxy(self.lineEdit_remote_ipv6.text(), self.spinBox_remote_port.value())
            except Exception as e:
                self.lineEdit_listening.setText(f"Exception {e}")            
                return
            
            self.pushButton_start_stop.setText("Stop")
            self.lineEdit_listening.setText("Starting...")
            self.proxy.run()
            self.lineEdit_remote_ipv6.setReadOnly(True)
            self.spinBox_remote_port.setReadOnly(True)
            self.lineEdit_listening.setText(f"{self.proxy.local_ip}:{self.proxy.local_port}")
            self.timer.start(1000)
        
        else:
            self.timer.stop()
            self.lineEdit_listening.setText("Stopping...")
            self.proxy.stop()
            self.lineEdit_listening.setText("Stopped")
            self.lineEdit_remote_ipv6.setReadOnly(False)
            self.spinBox_remote_port.setReadOnly(False)
            self.proxy = None
            self.pushButton_start_stop.setText("Start")
            
    
    def update_stats(self):
        if self.proxy is not None and self.proxy.running.is_set():
            self.label_sent.setText(f"{self.proxy.packets_out}")
            self.label_recv.setText(f"{self.proxy.packets_in}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.bind_actions()

    MainWindow.show()
    sys.exit(app.exec_())
